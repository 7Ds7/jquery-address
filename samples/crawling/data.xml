<?xml version="1.0" encoding="utf-8"?>
<data>
    <meta>
        <source>
            <p>Source: <a href="http://www.wikipedia.org">Wikipedia.org</a></p>
        </source>
    </meta>
    <pages>
        <page href="/" title="Home">
            <p><strong>Ajax</strong> (shorthand for <a href="/wiki/Asynchronous_I/O" title="Asynchronous I/O">asynchronous</a> <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> and <a href="/wiki/XML" title="XML">XML</a>) is a group of interrelated <a href="/wiki/Web_development" title="Web development">web development</a> techniques used on the <a href="/wiki/Client-side" title="Client-side">client-side</a> to create interactive <a href="/wiki/Web_application" title="Web application">web applications</a>. With Ajax, <a href="/wiki/Web_application" title="Web application">web applications</a> can retrieve data from the <a href="/wiki/Web_server" title="Web server">server</a> asynchronously in the background without interfering with the display and behavior of the existing page. The use of Ajax techniques has led to an increase in interactive or dynamic interfaces on web pages. Data are usually retrieved using the <i><a href="/wiki/XMLHttpRequest" title="XMLHttpRequest">XMLHttpRequest</a></i> <a href="/wiki/Object_(computer_science)" title="Object (computer science)">object</a>. Despite the name, the use of <a href="/wiki/XML" title="XML">XML</a> is not actually required, nor do the requests need to be <a href="/wiki/Asynchrony" title="Asynchrony">asynchronous</a>.</p>
            <p>Like <a href="/wiki/DHTML" title="DHTML">DHTML</a> and <a href="/wiki/LAMP_(software_bundle)" title="LAMP (software bundle)">LAMP</a>, Ajax is not a technology in itself, but a group of technologies. Ajax uses a combination of <a href="/wiki/HTML" title="HTML">HTML</a> and <a href="/wiki/Cascading_Style_Sheets" title="Cascading Style Sheets">CSS</a> to mark up and style information. The <a href="/wiki/Document_Object_Model" title="Document Object Model">DOM</a> is accessed with <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> to dynamically display, and to allow the user to interact with, the information presented. JavaScript and the XMLHttpRequest object provide a method for exchanging data asynchronously between browser and server to avoid full page reloads.</p>
        </page>
        <page href="/history" title="History">
            <p>In the 1990s, web browsers and web sites lacked the sophistication to provide a quick and responsive user experience. Online form entry could be tedious, since all the requested information had to be entered and then submitted to the web server. The form data was validated and if there were problems, the same form was again presented to the user. The flow of information and the resulting experience was choppy and disconnected, reflecting the stateless nature of HTTP.</p> 
            <p>Asynchronous loading of content really became practical when <a href="/wiki/Java_applet" title="Java applet">Java applets</a> were introduced in the first version of the Java language in 1995. These allow <a href="/wiki/Compiler" title="Compiler">compiled</a> client-side code to load data asynchronously from the web server after a web page is loaded. In 1996, <a href="/wiki/Internet_Explorer" title="Internet Explorer">Internet Explorer</a> introduced the <a href="/wiki/IFrame" title="IFrame">IFrame</a> element to <a href="/wiki/HTML" title="HTML">HTML</a>, which also enables this to be achieved. In 1999, Microsoft created the XMLHTTP <a href="/wiki/ActiveX" title="ActiveX">ActiveX</a> control in <a href="/wiki/Internet_Explorer_5" title="Internet Explorer 5">Internet Explorer 5</a>, which is now supported by <a href="/wiki/Mozilla" title="Mozilla">Mozilla</a>, <a href="/wiki/Safari_(web_browser)" title="Safari (web browser)">Safari</a>, <a href="/wiki/Opera_(web_browser)" title="Opera (web browser)">Opera</a> and other browsers as the native XMLHttpRequest object. The utility of background HTTP requests to the server and asynchronous web technologies remained fairly obscure until Google made a wide deployment of Ajax with <a href="/wiki/Gmail" title="Gmail">Gmail</a> (2004) and <a href="/wiki/Google_Maps" title="Google Maps">Google Maps</a> (2005).</p> 
            <p>The term "Ajax" was coined in 2005. <a href="/wiki/Jesse_James_Garrett" title="Jesse James Garrett">Jesse James Garrett</a> thought of the term "Ajax" while in the shower, when he realized the need for a shorthand term to represent the suite of technologies he was proposing to a client.</p> 
            <p>While the term "Ajax" is credited to Garrett, a patent application covering this type of user interface was filed on September 3, 2003, thus predating the term itself by two years. This application resulted in US Patent #7,523,401 being issued to Greg Aldridge of Kokomo, IN.</p> 
            <p>On April 5, 2006 the <a href="/wiki/World_Wide_Web_Consortium" title="World Wide Web Consortium">World Wide Web Consortium</a> (W3C) released the first draft specification for the object in an attempt to create an official <a href="/wiki/Web_standard" title="Web standard">web standard</a>.</p> 
        </page>
        <page href="/technologies" title="Technologies">
            <p>The term <em>Ajax</em> has come to represent a broad group of web technologies that can be used to implement a web application that communicates with a server in the background, without interfering with the current state of the page. In the article that coined the term Ajax, <a href="/wiki/Jesse_James_Garrett" title="Jesse James Garrett">Jesse James Garrett</a> explained that the following technologies are required:</p> 
            <ul> 
                <li><a href="/wiki/HTML" title="HTML">HTML</a> or <a href="/wiki/XHTML" title="XHTML">XHTML</a> and <a href="/wiki/CSS" title="CSS">CSS</a> for presentation</li> 
                <li>the <a href="/wiki/Document_Object_Model" title="Document Object Model">Document Object Model</a> for dynamic display of and interaction with data</li> 
                <li><a href="/wiki/XML" title="XML">XML</a> and <a href="/wiki/XSLT" title="XSLT">XSLT</a> for the interchange, and manipulation and display, of data, respectively</li> 
                <li>the <a href="/wiki/XMLHttpRequest" title="XMLHttpRequest">XMLHttpRequest</a> object for asynchronous communication</li> 
                <li><a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> to bring these technologies together</li> 
            </ul> 
            <p>Since then, however, there have been a number of developments in the technologies used in an Ajax application, and the definition of the term Ajax. In particular, it has been noted that:</p> 
            <ul> 
                <li>JavaScript is not the only client-side scripting language that can be used for implementing an Ajax application. Other languages such as <a href="/wiki/VBScript" title="VBScript">VBScript</a> are also capable of the required functionality. However JavaScript is the most popular language for Ajax programming due to its inclusion in and compatibility with the majority of modern web browsers.</li> 
                <li>XML is not required for data interchange and therefore XSLT is not required for the manipulation of data. <a href="/wiki/JSON" title="JSON">JavaScript Object Notation</a> (JSON) is often used as an alternative format for data interchange, although other formats such as preformatted HTML or plain text can also be used.</li> 
            </ul> 
            <p>Classic Ajax involves writing ad hoc JavaScript on the client. A simpler if cruder alternative is to use standard JavaScript libraries that can partially update a page, such as ASP.Net's UpdatePanel. Tools such as Echo2 and ZK enable fine grained control of a page from the server, using only standard JavaScript libraries.</p>
        </page>
        <page href="/rationale" title="Rationale">
            <ul> 
                <li>In many cases, related pages on a website consist of much content that is common between them. Using traditional methods, that content would have to be reloaded on every request. However, using Ajax, a web application can request only the content that needs to be updated, thus drastically reducing bandwidth usage and load time.</li> 
                <li>The use of asynchronous requests allows the client's Web browser UI to be more interactive and to respond quickly to inputs, and sections of pages can also be reloaded individually. Users may perceive the application to be faster or more responsive, even if the application has not changed on the server side.</li> 
                <li>The use of Ajax can reduce connections to the server, since scripts and <a href="/wiki/Style_sheet_(web_development)" title="Style sheet (web development)">style sheets</a> only have to be requested once.</li> 
                <li>State can be maintained throughout a Web site. JavaScript variables will persist because the main container page need not be reloaded.</li> 
            </ul> 
        </page>
    </pages>
</data>